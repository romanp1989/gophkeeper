// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/romanp1989/gophkeeper/internal/server/secret (interfaces: ISecretRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/romanp1989/gophkeeper/domain"
)

// MockISecretRepository is a mock of ISecretRepository interface.
type MockISecretRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISecretRepositoryMockRecorder
}

// MockISecretRepositoryMockRecorder is the mock recorder for MockISecretRepository.
type MockISecretRepositoryMockRecorder struct {
	mock *MockISecretRepository
}

// NewMockISecretRepository creates a new mock instance.
func NewMockISecretRepository(ctrl *gomock.Controller) *MockISecretRepository {
	mock := &MockISecretRepository{ctrl: ctrl}
	mock.recorder = &MockISecretRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecretRepository) EXPECT() *MockISecretRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISecretRepository) Create(arg0 context.Context, arg1 *domain.Secret) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISecretRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISecretRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockISecretRepository) Delete(arg0 context.Context, arg1 uint64, arg2 domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISecretRepositoryMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISecretRepository)(nil).Delete), arg0, arg1, arg2)
}

// GetAllByUserID mocks base method.
func (m *MockISecretRepository) GetAllByUserID(arg0 context.Context, arg1 domain.UserID) ([]*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockISecretRepositoryMockRecorder) GetAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockISecretRepository)(nil).GetAllByUserID), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockISecretRepository) GetByID(arg0 context.Context, arg1 uint64, arg2 domain.UserID) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockISecretRepositoryMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockISecretRepository)(nil).GetByID), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockISecretRepository) Update(arg0 context.Context, arg1 *domain.Secret) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockISecretRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISecretRepository)(nil).Update), arg0, arg1)
}
